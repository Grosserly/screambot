const fs = require("fs")
const axios = require("axios")
const { createWorker } = require("tesseract.js")

const worker = createWorker({
	logger: logOCR
})



/**
 * Download a file.
 * 
 * @param {string} url - URL to download from
 * @param {string} path - path to save the file to
 * @return {Promise} resolves when file has been fully downloaded
 */
function download(url, path) {
	return new Promise( async (resolve, reject) => {
		const params = {
			method: "get",
			url,
			responseType: "stream"
		}

		const { data } = await axios(params)
		data.pipe(fs.createWriteStream(path))
			.on("finish", resolve)
			.on("error", reject)
	})
}


/**
 * A wrapper to let tesseract.js get an image from a URL.
 * 
 * @param {string} url - link to an image
 * @return {Promise} worker.recognize() output
 */
async function recognizeFromURL(url) {
	await download(url, "./ocr.tmp")
	return await worker.recognize("./ocr.tmp")
}


/**
 * Prettify messages from tesseract.js before printing them
 *   (because it logs a lot of stuff).
 * 
 * @param {string} message - message generated by tesseract.js
 */
function logOCR(message) {
	const { workerId, status, progress } = message

	switch(status) {
		case "initializing api":
			console.log("[OCR] Initializing...")
			break;
		
		case "recognizing text":
			const progressPercent = Math.floor(progress * 100)
			console.log(`[OCR] Recognizing text... (${progressPercent}%)`)

		case "initialized api":
		case "loading tesseract core":
		case "loaded tesseract core":
		case "initializing tesseract":
		case "initialized tesseract":
		case "loading language traineddata":
		case "loading language traineddata (from cache)":
		case "loaded language traineddata":
			break

		default:
			console.warn("[OCR] Unexpected message from tesseract.js:", message)
	}
}


// Worker is ready when this async function resolves
worker.ready = (async () => {
	await worker.load()
	await worker.loadLanguage("eng")
	await worker.initialize("eng")
})()

worker.recognizeFromURL = recognizeFromURL

module.exports = worker
